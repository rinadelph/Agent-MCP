#!/usr/bin/env node
/**
 * DEMONSTRATES THE CRITICAL SECURITY VULNERABILITY
 * This script shows how invalid tokens can access admin sessions
 */

// Import the vulnerable session detection functions
const { detectAdminSessionByToken, detectAgentSessionByToken } = await import('./build/utils/sessionDetection.js');

console.log('🚨 DEMONSTRATING CRITICAL SECURITY VULNERABILITY\n');

// Test 1: Completely invalid token should return null but returns admin session
console.log('TEST 1: Using completely invalid token "hacker-attack"');
const result1 = await detectAdminSessionByToken('hacker-attack');
console.log(`Result: ${result1}`);
console.log(`Expected: null`);
console.log(`Actual: ${result1 ? 'VULNERABLE - Returns session!' : 'SECURE - Returns null'}\n`);

// Test 2: Empty token should return null
console.log('TEST 2: Using empty token ""');
const result2 = await detectAdminSessionByToken('');
console.log(`Result: ${result2}`);
console.log(`Expected: null`);
console.log(`Actual: ${result2 ? 'VULNERABLE - Returns session!' : 'SECURE - Returns null'}\n`);

// Test 3: Malicious token attempt
console.log('TEST 3: Using malicious token "../../etc/passwd"');
const result3 = await detectAdminSessionByToken('../../etc/passwd');
console.log(`Result: ${result3}`);
console.log(`Expected: null`);
console.log(`Actual: ${result3 ? 'VULNERABLE - Returns session!' : 'SECURE - Returns null'}\n`);

// Test 4: Agent session with invalid token
console.log('TEST 4: Agent detection with invalid token "unauthorized"');
const result4 = await detectAgentSessionByToken('unauthorized');
console.log(`Result: ${result4}`);
console.log(`Expected: null`);
console.log(`Actual: ${result4 ? 'VULNERABLE - Returns session!' : 'SECURE - Returns null'}\n`);

console.log('🔍 VULNERABILITY SUMMARY:');
const vulnerabilities = [result1, result2, result3, result4].filter(r => r !== null);
console.log(`Vulnerable tests: ${vulnerabilities.length}/4`);

if (vulnerabilities.length > 0) {
    console.log('🚨 CRITICAL SECURITY VULNERABILITY CONFIRMED!');
    console.log('Invalid tokens are returning admin/agent sessions');
    console.log('This allows unauthorized access to sensitive functionality');
} else {
    console.log('✅ No vulnerabilities detected - session detection is secure');
}

process.exit(vulnerabilities.length > 0 ? 1 : 0);